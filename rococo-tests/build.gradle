buildscript {
    ext {
        allureVersion = '2.21.0'
        selenideVersion = '7.0.4'
    }
}

plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
    id 'io.qameta.allure-adapter' version '2.11.2'
}

group 'guru.qa'
version '0.0.6-SNAPSHOT'

repositories {
    mavenCentral()
}

allure {
    version.set("${allureVersion}")
    adapter {
        aspectjVersion.set("1.9.19")
        autoconfigure.set(true)
        aspectjWeaver.set(true)
    }
}

configurations {
    jaxb
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    // REST
    testImplementation 'com.squareup.retrofit2:retrofit:2.9.0'
    testImplementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    testImplementation 'com.squareup.okhttp3:logging-interceptor:3.14.9'
    // DB
    testImplementation 'org.springframework:spring-jdbc:6.0.4'
    testImplementation 'org.postgresql:postgresql:42.5.3'
    testImplementation 'p6spy:p6spy:3.9.1'
    testImplementation 'com.github.vertical-blank:sql-formatter:2.0.3'
    testImplementation 'org.springframework.security:spring-security-crypto:6.1.0'
    // Allure
    testImplementation "io.qameta.allure:allure-attachments:${allureVersion}"
    testImplementation("io.qameta.allure:allure-junit5:${allureVersion}") {
        exclude group: "org.junit.jupiter-api"
        exclude group: "org.junit.platform"
        exclude group: "org.junit.jupiter"
    }
    testImplementation("io.qameta.allure:allure-selenide:${allureVersion}") {
        exclude group: 'com.codeborne'
    }
    testImplementation ("io.qameta.allure:allure-okhttp3:${allureVersion}"){
        exclude group: "io.qameta.allure", module: "allure-attachments"
        exclude group: "com.squareup.okhttp3"
    }
    testImplementation ("io.qameta.allure:allure-grpc:${allureVersion}") {
        exclude group: "io.qameta.allure", module: "allure-attachments"
    }
    // WEB
    testImplementation "com.codeborne:selenide:${selenideVersion}"
    // Utils
    testImplementation ('com.github.javafaker:javafaker:1.0.2'){
        exclude group: 'org.apache.commons', module: 'commons-lang3'
    }
    testImplementation 'commons-io:commons-io:2.11.0'
    testImplementation 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    testImplementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    // Kafka
    testImplementation 'org.apache.kafka:kafka-clients:3.5.0'
    // Wiremock
    testImplementation ('com.github.tomakehurst:wiremock-jre8:2.35.0'){
        exclude group: "com.fasterxml.jackson"
        exclude group: "com.fasterxml.jackson.core"
        exclude group: "org.slf4j"
    }
    testImplementation 'com.github.tomakehurst:wiremock-standalone:2.27.2'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}